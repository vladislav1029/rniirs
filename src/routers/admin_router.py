from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from src.keyboard import (
    get_admin_main_kb,
    get_admin_articles_kb,
    get_admin_article_actions_kb,
    get_admin_requests_kb,
    get_admin_request_actions_kb
)

# ID –∞–¥–º–∏–Ω–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥ –∏–ª–∏ –ë–î)
ADMIN_IDS = {123456789, 987654321}

admin_router = Router()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
async def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–¥–º–∏–Ω–∞
@admin_router.message(Command("admin"))
async def admin_start(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞!")
        return
    
    await message.answer(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_main_kb()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—å–∏"
@admin_router.message(F.text == "üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—å–∏")
async def show_articles(message: Message):
    if not await is_admin(message.from_user.id):
        return
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π –∏–∑ –ë–î
    articles = [
        {"id": 1, "title": "–°—Ç–∞—Ç—å—è 1"},
        {"id": 2, "title": "–°—Ç–∞—Ç—å—è 2"}
    ]
    
    await message.answer(
        "üìö –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π:",
        reply_markup=get_admin_articles_kb(articles)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ü–∏—è —Å—Ç–∞—Ç—å–∏"
@admin_router.message(F.text == "‚úè –†–µ–¥–∞–∫—Ü–∏—è —Å—Ç–∞—Ç—å–∏")
async def edit_article(message: Message):
    if not await is_admin(message.from_user.id):
        return
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID —Å—Ç–∞—Ç—å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_admin_main_kb()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏"
@admin_router.message(F.text == "üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def show_requests(message: Message):
    if not await is_admin(message.from_user.id):
        return
    
    # –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –∏–∑ –ë–î
    requests = [
        {"id": 1, "user_name": "User1", "type": "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"},
        {"id": 2, "user_name": "User2", "type": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"}
    ]
    
    await message.answer(
        "üì® –ó–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:",
        reply_markup=get_admin_requests_kb(requests)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç–µ–π
@admin_router.callback_query(F.data.startswith("admin_article_"))
async def handle_article(callback: CallbackQuery):
    if not await is_admin(callback.from_user.id):
        return
    
    article_id = int(callback.data.split("_")[-1])
    await callback.message.edit_text(
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å—ë–π ID: {article_id}",
        reply_markup=get_admin_article_actions_kb(article_id)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å—Ç–∞—Ç—å—ë–π
@admin_router.callback_query(F.data.startswith("admin_edit_"))
async def edit_article_action(callback: CallbackQuery):
    article_id = int(callback.data.split("_")[-1])
    await callback.message.answer(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ ID: {article_id}")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_delete_"))
async def delete_article_action(callback: CallbackQuery):
    article_id = int(callback.data.split("_")[-1])
    await callback.message.answer(f"–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ ID: {article_id}")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫
@admin_router.callback_query(F.data.startswith("admin_request_"))
async def handle_request(callback: CallbackQuery):
    request_id = int(callback.data.split("_")[-1])
    await callback.message.edit_text(
        f"–ó–∞—è–≤–∫–∞ ID: {request_id}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_request_actions_kb(request_id)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–∞–º–∏
@admin_router.callback_query(F.data.startswith("admin_approve_"))
async def approve_request(callback: CallbackQuery):
    request_id = int(callback.data.split("_")[-1])
    await callback.message.answer(f"–ó–∞—è–≤–∫–∞ {request_id} –æ–¥–æ–±—Ä–µ–Ω–∞!")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_reject_"))
async def reject_request(callback: CallbackQuery):
    request_id = int(callback.data.split("_")[-1])
    await callback.message.answer(f"–ó–∞—è–≤–∫–∞ {request_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
    await callback.answer()

# –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
@admin_router.callback_query(F.data == "admin_back_to_main")
async def back_to_main(callback: CallbackQuery):
    await callback.message.edit_text(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_main_kb()
    )
    await callback.answer()

@admin_router.callback_query(F.data == "admin_back_to_articles")
async def back_to_articles(callback: CallbackQuery):
    articles = [
        {"id": 1, "title": "–°—Ç–∞—Ç—å—è 1"},
        {"id": 2, "title": "–°—Ç–∞—Ç—å—è 2"}
    ]
    await callback.message.edit_text(
        "üìö –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π:",
        reply_markup=get_admin_articles_kb(articles)
    )
    await callback.answer()