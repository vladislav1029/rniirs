from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from typing import Optional
import logging
from src.keyboard_admin import (
    get_admin_main_kb,
    get_admin_articles_kb,
    get_admin_article_actions_kb,
    get_admin_requests_kb,
    get_admin_request_actions_kb
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏
try:
    from src.link import check_admin_access
except ImportError:
    logging.error("Failed to import check_admin_access from auth module")
    raise

admin_router = Router()

async def safe_extract_id(data: str, prefix: str) -> Optional[int]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∏–∑ callback –¥–∞–Ω–Ω—ã—Ö"""
    try:
        return int(data.replace(prefix, ""))
    except (ValueError, AttributeError) as e:
        logging.error(f"Error extracting ID from {data}: {e}")
        return None

async def handle_admin_errors(event: Message | CallbackQuery, 
                           error_msg: str = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    if isinstance(event, Message):
        await event.answer("‚ö†Ô∏è " + error_msg)
    elif isinstance(event, CallbackQuery):
        await event.answer("‚ö†Ô∏è " + error_msg, show_alert=True)
        await event.message.edit_reply_markup()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ==========
@admin_router.message(Command("admin"))
async def admin_start(message: Message):
    try:
        if not await check_admin_access(message):
            return
        
        await message.answer(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_admin_main_kb()
        )
    except Exception as e:
        logging.error(f"Error in admin_start: {e}")
        await handle_admin_errors(message, "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏")

@admin_router.message(F.text == "üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—å–∏")
async def show_articles(message: Message):
    try:
        if not await check_admin_access(message):
            return
        
        articles = [
            {"id": 1, "title": "–°—Ç–∞—Ç—å—è 1"},
            {"id": 2, "title": "–°—Ç–∞—Ç—å—è 2"}
        ]
        
        await message.answer(
            "üìö –°–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π:",
            reply_markup=get_admin_articles_kb(articles)
        )
    except Exception as e:
        logging.error(f"Error in show_articles: {e}")
        await handle_admin_errors(message, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–µ–π")

# ========== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ ==========
@admin_router.callback_query(F.data.startswith("admin_article_"))
async def handle_article(callback: CallbackQuery):
    try:
        if not await check_admin_access(callback):
            return
        
        article_id = await safe_extract_id(callback.data, "admin_article_")
        if not article_id:
            raise ValueError("Invalid article ID")
        
        await callback.message.edit_text(
            f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—å—ë–π ID: {article_id}",
            reply_markup=get_admin_article_actions_kb(article_id)
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"Error in handle_article: {e}")
        await handle_admin_errors(callback, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏")

# ========== –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==========
@admin_router.callback_query(F.data == "admin_back_to_main")
async def back_to_main(callback: CallbackQuery):
    try:
        if not await check_admin_access(callback):
            return
        
        await callback.message.edit_text(
            "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_admin_main_kb()
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"Error in back_to_main: {e}")
        await handle_admin_errors(callback, "–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")