from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from src.keyboard_users import get_user_main_kb, get_user_help_kb  # –ò–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä

# –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
from src.repository.db_helper import async_session

from src.schemas import UserCreate
from src.service.user_service import UserService  # –ò–º–ø–æ—Ä—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤

user_router = Router()


@user_router.message(Command("start"))
async def cmd_start(message: Message):
    async with async_session() as session:
        # –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        user = UserService(session)

        new_user = await user.create_user(UserCreate(id=message.from_user.id))

        is_admin = await user.is_admin(message.from_user.id)

    if is_admin:
        from .admin_router import admin_start  # –õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç

        await admin_start(message)
    else:
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=get_user_main_kb())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
@user_router.message(F.text == "‚Ñπ –ü–æ–º–æ—â—å")
async def user_help(message: Message):
    await message.answer("–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:", reply_markup=get_user_help_kb())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É" (–∑–∞–≥–ª—É—à–∫–∞)
@user_router.message(F.text == "üìù –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def submit_application(message: Message):
    await message.answer("‚è≥ –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å —Ç–µ–º–∞—Ç–∏–∫—É"
@user_router.message(F.text == "üìö –í—ã–±—Ä–∞—Ç—å —Ç–µ–º–∞—Ç–∏–∫—É")
async def choose_theme(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–º–∞—Ç–∏–∫—É:", reply_markup=get_themes_kb()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
@user_router.message(F.text == "üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def manage_notifications(message: Message):
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:", reply_markup=get_notifications_kb()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—å–∏"
@user_router.message(F.text == "üì∞ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—å–∏")
async def view_articles(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–µ–π:", reply_markup=get_articles_kb())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —Ç–µ–º–∞—Ç–∏–∫
@user_router.callback_query(F.data.startswith("theme_"))
async def themes_handler(callback: CallbackQuery):
    action = callback.data.split("_")[1]

    if action == "tech":
        await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º–∞—Ç–∏–∫—É: –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
    elif action == "science":
        await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º–∞—Ç–∏–∫—É: –ù–∞—É–∫–∞")
    elif action == "art":
        await callback.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–µ–º–∞—Ç–∏–∫—É: –ò—Å–∫—É—Å—Å—Ç–≤–æ")
    elif action == "back":
        await callback.message.delete()
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_user_main_kb())

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç–µ–π
@user_router.callback_query(F.data.startswith("articles_"))
async def articles_handler(callback: CallbackQuery):
    action = callback.data.split("_")[1]

    if action == "latest":
        # –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç—å—ë–π –∏ –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞
        article_text = "üì∞ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞—Ç—å—è:\n\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: –ù–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ IT\n\n–û–ø–∏—Å–∞–Ω–∏–µ: –û–±–∑–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π..."
        await callback.message.edit_text(
            article_text,
            reply_markup=get_article_url_kb("https://example.com/latest-article"),
        )
    elif action == "popular":
        article_text = "üì∞ –ü–æ–ø—É–ª—è—Ä–Ω–∞—è —Å—Ç–∞—Ç—å—è:\n\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: –¢–æ–ø-10 –Ω–∞—É—á–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∏–π\n\n–û–ø–∏—Å–∞–Ω–∏–µ: –°–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–æ–¥–∞..."
        await callback.message.edit_text(
            article_text,
            reply_markup=get_article_url_kb("https://example.com/popular-article"),
        )
    elif action == "back":
        await callback.message.delete()
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_user_main_kb())

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
@user_router.callback_query(F.data.startswith("notifications_"))
async def notifications_handler(callback: CallbackQuery):
    action = callback.data.split("_")[1]

    if action == "off":
        await callback.message.edit_text("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    elif action == "on":
        await callback.message.edit_text("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")
    elif action == "back":
        await callback.message.delete()
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_user_main_kb())

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –æ–±—ã—á–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ö
@user_router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_user_main_kb())
