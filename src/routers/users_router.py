import logging
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hbold
from src.models import Article, PrivateEnum
from src.repository.article_repository import ArticleRepository
from src.repository.catalog_repository import CatalogRepository
from src.schemas import CatalogCreate, UserCreate
from src.keyboard_users import (
    get_catalog_actions_kb,
    get_catalog_articles_kb,
    get_catalog_confirm_kb,
    get_back_to_catalogs_kb,
    get_privacy_selection_kb,
    get_public_catalog_kb,
    get_user_main_kb,
)
from src.fsms import CatalogStates
from src.repository.db_helper import async_session
from src.service.user_service import UserService
from src.utilits.error_handlers import handle_user_errors

user_router = Router()
log = logging.Logger(__name__)


@user_router.message(Command("start"))
async def cmd_start(message: Message):
    async with async_session() as session:
        
        # –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        user = UserService(session)

        new_user = await user.create_user(UserCreate(id=message.from_user.id))

        is_admin = await user.is_admin(message.from_user.id)

    if is_admin:
        from .admin_router import admin_start  # –õ–µ–Ω–∏–≤—ã–π –∏–º–ø–æ—Ä—Ç

        await admin_start(message)
    else:
        
        start_text = (
        f"üìö {hbold('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CatalogBot!')}\n\n"
        "‚ú® –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É\n"
        "/create_catalog - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞—Ç–∞–ª–æ–≥\n"
        "/my_catalogs - –ú–æ–∏ –∫–∞—Ç–∞–ª–æ–≥–∏\n"
        "/search_public - –ü–æ–∏—Å–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤\n\n"
        "‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é!"
        )
        await message.answer(
        start_text,
        reply_markup=get_user_main_kb(),
        parse_mode="HTML"
    )
    
    

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–µ–π —á–µ—Ä–µ–∑ reply
@user_router.message(F.reply_to_message)
async def add_article_reply(message: Message):
    try:
        original_text = message.reply_to_message.text
        if "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–º" not in original_text:
            return
            
        catalog_id = int(original_text.split("ID: ")[1].split("\n")[0])
        
        async with async_session() as session:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            repo = CatalogRepository(session)
            catalog = await repo.get_catalog_by_id(catalog_id)
            
            if catalog.user_id != message.from_user.id:
                await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞")
                return
            ArticleRepository
            article_repo = ArticleRepository(session)
            new_article = Article(
                title="–ù–æ–≤–∞—è —Å—Ç–∞—Ç—å—è",
                description=message.text,
                catalog_id=catalog_id
            )
            session.add(new_article)
            await session.commit()
            
            await message.answer(
                "‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                reply_markup=get_catalog_articles_kb(catalog_id)
            )
            
    except Exception as e:
        logging.error(f"Add article error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏")

# –ü–æ–∏—Å–∫ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤
@user_router.message(Command("search_public"))
async def search_public_catalogs(message: Message):
    try:
        async with async_session() as session:
            repo = CatalogRepository(session)
            public_catalogs = await repo.get_public_catalogs()
            
            if not public_catalogs:
                await message.answer("üîç –ü—É–±–ª–∏—á–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            builder = InlineKeyboardBuilder()
            for catalog in public_catalogs:
                builder.button(
                    text=f"üìÅ {catalog.title} ({catalog.user_id})",
                    callback_data=f"view_public_catalog_{catalog.id}"
                )
            builder.adjust(1)
            
            await message.answer(
                "üåç –ü—É–±–ª–∏—á–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏:",
                reply_markup=builder.as_markup()
            )
            
    except Exception as e:
        logging.error(f"Public search error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞")

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π
@user_router.callback_query(F.data.startswith("delete_article_"))
async def delete_article(callback: CallbackQuery):
    try:
        article_id = int(callback.data.split("_")[-1])
        
        async with async_session() as session:
            article_repo = ArticleRepository(session)
            article = await article_repo.get_article(article_id)
            
            if not article:
                await callback.answer("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ –∫–∞—Ç–∞–ª–æ–≥
            catalog_repo = CatalogRepository(session)
            catalog = await catalog_repo.get_catalog_by_id(article.catalog_id)
            
            if catalog.user_id != callback.from_user.id:
                await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ")
                return
            
            await article_repo.delete_article(article_id)
            await callback.message.edit_text(
                text=f"‚úÖ –°—Ç–∞—Ç—å—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ {catalog.title}",
                reply_markup=get_catalog_articles_kb(catalog.id)
            )
            
    except Exception as e:
        logging.error(f"Delete article error: {e}")
        await handle_user_errors(callback)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
@user_router.callback_query(F.data.startswith("view_public_catalog_"))
async def view_public_catalog(callback: CallbackQuery):
    try:
        catalog_id = int(callback.data.split("_")[-1])
        
        async with async_session() as session:
            
            repo = CatalogRepository(session)
            catalog = await repo.get_catalog_by_id(catalog_id)
            
            if not catalog or catalog.private != PrivateEnum.PUBLIC:
                await callback.answer("‚ùå –ö–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return
            
            articles = await ArticleRepository(session).get_articles(catalog_id)
            articles_text = "\n".join(
                [f"üìå {art.description[:50]}..." for art in articles]
            )
            
            text = (
                f"üìÅ –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥: {hbold(catalog.title)}\n"
                f"üë§ –ê–≤—Ç–æ—Ä: {catalog.user_id}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω: {catalog.date.strftime('%d.%m.%Y')}\n\n"
                f"üìö –°—Ç–∞—Ç—å–∏ ({len(articles)}):\n{articles_text}"
            )
            
            await callback.message.edit_text(
                text,
                parse_mode="HTML",
                reply_markup=get_public_catalog_kb(catalog_id)
            )
            
    except Exception as e:
        logging.error(f"View public catalog error: {e}")
        await handle_user_errors(callback)

@user_router.message(Command("create_catalog"))
async def start_create_catalog(message: Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞:")
    await state.set_state(CatalogStates.waiting_catalog_title)


@user_router.message(CatalogStates.waiting_catalog_title)
async def process_catalog_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer(
        "üîí –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç—É–ø–∞:", reply_markup=get_privacy_selection_kb()
    )
    await state.set_state(CatalogStates.waiting_catalog_privacy)


@user_router.callback_query(
    CatalogStates.waiting_catalog_privacy, F.data.startswith("privacy_")
)
async def process_catalog_privacy(callback: CallbackQuery, state: FSMContext):
    try:
        data = await state.get_data()
        privacy_type = callback.data.split("_")[1]

        catalog_data = CatalogCreate(
            title=data["title"], private=privacy_type, user_id=callback.from_user.id
        )

        async with async_session() as session:
            repo = CatalogRepository(session)
            catalog = await repo.create_catalog(catalog_data)

            await callback.message.answer(
                f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥ '{catalog.title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
                reply_markup=get_catalog_actions_kb(catalog.id),
            )

    except Exception as e:
        log.error(f"Catalog creation error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞", show_alert=True)
    finally:
        await state.clear()


@user_router.message(Command("my_catalogs"))
async def list_catalogs(message: Message):
    try:
        async with async_session() as session:
            repo = CatalogRepository(session)
            catalogs = await repo.get_user_catalogs(message.from_user.id)

            if not catalogs:
                await message.answer("üìÇ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ç–∞–ª–æ–≥–æ–≤")
                return

            kb = InlineKeyboardBuilder()
            for catalog in catalogs:
                kb.button(
                    text=f"üìÅ {catalog.title} ({catalog.private.value})",
                    callback_data=f"view_catalog_{catalog.id}",
                )
            kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")
            kb.adjust(1)

            await message.answer("üìÇ –í–∞—à–∏ –∫–∞—Ç–∞–ª–æ–≥–∏:", reply_markup=kb.as_markup())

    except Exception as e:
        log.error(f"Catalog list error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤")


@user_router.callback_query(F.data.startswith("edit_catalog_"))
async def start_edit_catalog(callback: CallbackQuery, state: FSMContext):
    catalog_id = int(callback.data.split("_")[-1])
    await state.update_data(catalog_id=catalog_id)
    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞:",
        reply_markup=get_back_to_catalogs_kb(catalog_id),
    )
    await state.set_state(CatalogStates.waiting_edit_title)


@user_router.message(CatalogStates.waiting_edit_title)
async def process_edit_title(message: Message, state: FSMContext):
    try:
        data = await state.get_data()
        catalog_id = data["catalog_id"]

        async with async_session() as session:
            repo = CatalogRepository(session)
            await repo.update_catalog(catalog_id, {"title": message.text})

            catalog = await repo.get_catalog_by_id(catalog_id)
            await message.answer(
                f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {catalog.title}",
                reply_markup=get_catalog_actions_kb(catalog_id),
            )

    except Exception as e:
        log.error(f"Edit catalog error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞")
    finally:
        await state.clear()
